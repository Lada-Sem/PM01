using MeApp.Views;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Input;
using Xamarin.Forms;

namespace MeApp
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _currentTab;
        private string _dashboardContent;
        private string _theoremContent;


        public string CurrentTab
        {
            get => _currentTab;
            set
            {
                _currentTab = value;
                OnPropertyChanged();
            }
        }

        public string DashboardContent
        {
            get => _dashboardContent;
            set
            {
                _dashboardContent = value;
                OnPropertyChanged();
            }
        }

        public string TheoremContent
        {
            get => _theoremContent;
            set
            {
                _theoremContent = value;
                OnPropertyChanged();
            }
        }

        public ICommand NavigateCommand { get; }

        public MainViewModel()
        {
            NavigateCommand = new Command<string>(OnNavigate);
            DashboardContent = "Информация о решении уравнений"; // Значение по умолчанию
            TheoremContent = "Информация о теоремах"; // Значение по умолчанию
        }

        private void OnNavigate(string parameter)
        {
            switch (parameter)
            {
                case "photos":
                    DashboardContent = "Информация о решении СЛАУ:\n\n" +
                        "1. Метод Гаусса (прямой и обратный ход):\n" +
                        "   Этот метод используется для преобразования системы линейных уравнений в верхнюю треугольную форму с помощью элементарных преобразований строк. " +
                        "После этого выполняется обратный ход для нахождения значений переменных. " +
                        "Формулы:\n" +
                        "   Прямой ход: A' = PA, b' = Pb\n" +
                        "   Обратный ход: x_n = (b_n - Σ(a_nj * x_j)) / a_nn\n\n" +

                        "2. Метод Жордана-Гаусса:\n" +
                        "   Этот метод является модификацией метода Гаусса, который приводит матрицу к единичной форме. " +
                        "Он включает в себя нормализацию строк и обнуление остальных элементов. " +
                        "Формула: A' = I, где I — единичная матрица.\n\n" +

                        "3. Метод простой итерации:\n" +
                        "   Этот метод основан на преобразовании системы уравнений в итерационную форму. " +
                        "Каждая переменная обновляется на основе предыдущих значений. " +
                        "Формула: x^{(k+1)} = D^{-1}(b - (L + U)x^{(k})).\n\n" +

                        "4. Метод Зейделя:\n" +
                        "   Этот метод является улучшенной версией метода простой итерации, использующей уже обновленные значения переменных. " +
                        "Формула: x^{(k+1)} = D^{-1}(b - (L + U)x^{(k)}).\n\n" +

                        "Каждый из этих методов имеет свои преимущества и недостатки, и выбор метода зависит от свойств матрицы и конкретной задачи.";
                    TheoremContent = "Теоремы о решении СЛАУ:\n\n" +
    "1. Теорема о существовании и единственности решения:\n" +
    "   Для системы линейных уравнений существует единственное решение, если определитель матрицы коэффициентов не равен нулю.\n\n" +
    "2. Теорема о суперпозиции:\n" +
    "   Если два решения линейного уравнения известны, то их линейная комбинация также является решением.\n\n";

                    break;
                case "articles":
                    DashboardContent = "Информация о интерполяции и аппроксимации:\n\n" +
                     "• Интерполяционный полином Лагранжа:\n" +
                     "  Этот метод позволяет находить полином, который проходит через заданные точки. " +
                     "Формула: L(x) = Σ(y_i * Π((x - x_j) / (x_i - x_j))), где j ≠ i.\n\n" +

                     "• Кубические сплайны:\n" +
                     "  Сплайны представляют собой кусочные полиномы, которые обеспечивают гладкость и непрерывность первой и второй производных. " +
                     "Кубические сплайны используются для аппроксимации данных и обеспечивают более точное представление, чем линейные сплайны.\n\n" +

                     "• Метод наименьших квадратов:\n" +
                     "  Этот метод используется для нахождения наилучшей аппроксимации данных с помощью полинома или другой функции. " +
                     "Он минимизирует сумму квадратов отклонений между наблюдаемыми и предсказанными значениями. " +
                     "Формула: min Σ(y_i - f(x_i))^2.";
                    TheoremContent = "Информация о теоремах:\n\n" +
                        "• Теорема о существовании и единственности решения:\n" +
                        "  Эта теорема утверждает, что для системы линейных уравнений существует единственное решение, если матрица коэффициентов невырождена.\n\n" +

                        "• Теорема о линейной зависимости:\n" +
                        "  Набор векторов является линейно зависимым, если один из векторов может быть представлен как линейная комбинация остальных.\n\n" +

                        "• Теорема о ранге матрицы:\n" +
                        "  Ранг матрицы равен максимальному числу линейно независимых строк (или столбцов) в ней.\n\n" +

                        "• Теорема Крамера:\n" +
                        "  Эта теорема предоставляет формулы для нахождения решений системы линейных уравнений с помощью определителей, при условии что матрица коэффициентов невырождена.";
                 
                    break;
                case "projects":
                    DashboardContent = "Информация о численном интегрировании:\n\n" +
                        "• Формулы прямоугольников:\n" +
                        "  - Левых: I ≈ Σf(x_i) * Δx, где x_i - левый конец интервала.\n" +
                        "  - Правых: I ≈ Σf(x_i) * Δx, где x_i - правый конец интервала.\n" +
                        "  - Средних: I ≈ Σf((x_i + x_{i+1})/2) * Δx.\n\n" +

                        "• Формула трапеций:\n" +
                        "  Этот метод использует трапеции для аппроксимации площади под кривой. " +
                        "  Формула: I ≈ (Δx/2) * (f(a) + f(b)).\n\n" +

                        "• Формула Симпсона:\n" +
                        "  Этот метод комбинирует формулы трапеций и парабол для более точной аппроксимации. " +
                        "  Формула: I ≈ (Δx/6) * (f(a) + 4f((a+b)/2) + f(b)).\n\n" +

                        "• Формулы Гаусса:\n" +
                        "  Эти формулы используют взвешенные суммы значений функции в определенных точках для более точного вычисления интеграла. " +
                        "  Они обеспечивают высокую точность при меньшем количестве вычислений.";
                    TheoremContent = "Теоремы о численном интегрировании:\n\n" +
                                            "1. Теорема о сходимости:\n" +
                                            "   Если последовательность интегралов сходится, то предел интеграла равен интегралу предела.\n\n" +
                                            "2. Теорема о точности метода трапеций:\n" +
                                            "   Метод трапеций дает точное значение интеграла для линейных функций.\n\n";
                    break;
                case "settings":
                    DashboardContent = "Информация о численном дифференцировании:\n" +
                        "Этот метод используется для приближенного вычисления производных функций. " +
                        "Основные формулы включают:\n" +
                        "• Прямые разности: f'(x) ≈ (f(x+h) - f(x))/h (явная)\n" +
                        "• Обратные разности: f'(x) ≈ (f(x) - f(x-h))/h (неявная)\n" +
                        "• Центральные разности: f'(x) ≈ (f(x+h) - f(x-h))/(2h).";
                    TheoremContent = "Теоремы о численном дифференцировании:\n\n" +
                       "1. Теорема о конечных разностях:\n" +
                       "   Для функции, имеющей производную, можно использовать конечные разности для приближенного вычисления производной.\n\n" +
                       "2. Теорема о точности центральных разностей:\n" +
                       "   Центральные разности обеспечивают более высокую точность по сравнению с прямыми разностями.\n\n";
                    break;
                case "Решение уравнений":
                    DashboardContent = "Информация о решении обыкновенных дифференциальных уравнений (ОДУ):\n" +
                        "• Метод Эйлера:\n" +
                        "  Этот метод является простым численным методом для решения ОДУ. " +
                        "  Он использует явное или неявное приближение для вычисления значений функции. " +
                        "  Формула: y_{n+1} = y_n + h * f(t_n, y_n).\n\n" +

                        "• Методы Рунге-Кутты:\n" +
                        "  Это группа методов, которые обеспечивают более точные результаты по сравнению с методом Эйлера. " +
                        "  Существуют различные порядки методов Рунге-Кутты, например, метод 4-го порядка, который использует несколько оценок для вычисления следующего значения.\n\n" +

                        "• Метод Адамса:\n" +
                        "  Этот метод является многопроходным методом, который использует информацию из предыдущих шагов для вычисления текущего значения. " +
                        "  Он может быть как явным, так и неявным, и обеспечивает высокую точность при решении ОДУ.";

                    break;

            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}